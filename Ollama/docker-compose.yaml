services:
  ollama:
    volumes:
      - ollama:/root/.ollama
    container_name: ollama
    tty: true
    ports:
      - 11434:11434
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    restart: unless-stopped
    image: ollama/ollama:${OLLAMA_DOCKER_TAG-latest}

  openwebui:
    container_name: open-webui
    restart: unless-stopped
    image: ghcr.io/open-webui/open-webui:main
    ports:
      - "3000:8080"
    volumes:
      - open-webui:/app/backend/data

  karakeep:
    container_name: karakeep
    image: ghcr.io/karakeep-app/karakeep:${KARAKEEP_VERSION:-release}
    restart: unless-stopped
    volumes:
      # By default, the data is stored in a docker volume called "data".
      # If you want to mount a custom directory, change the volume mapping to:
      # - /path/to/your/directory:/data
      - data:/data
    ports:
      - 4000:3000
    env_file:
      - .env
    environment:
      MEILI_ADDR: http://meilisearch:7700
      BROWSER_WEB_URL: http://chrome:9222
      NEXTAUTH_URL=https://karakeep.home.arpa
      OAUTH_CLIENT_ID=<Client ID from authentik>
      OAUTH_CLIENT_SECRET=<Client secret from authentik>
      OAUTH_WELLKNOWN_URL=https://authentik.company/application/o/karakeep/.well-known/openid-configuration
      OAUTH_PROVIDER_NAME=authentik
      OAUTH_ALLOW_DANGEROUS_EMAIL_ACCOUNT_LINKING=true
      # Optional: You can add this if you only want to allow login with Authentik
      # DISABLE_PASSWORD_AUTH=true
      # Optional but highly recommended:
      # DISABLE_SIGNUPS=true

      # You almost never want to change the value of the DATA_DIR variable.
      # If you want to mount a custom directory, change the volume mapping above instead.
      DATA_DIR: /data # DON'T CHANGE THIS
  chrome:
    container_name: chrome
    image: gcr.io/zenika-hub/alpine-chrome:123
    restart: unless-stopped
    command:
      - --no-sandbox
      - --disable-gpu
      - --disable-dev-shm-usage
      - --remote-debugging-address=0.0.0.0
      - --remote-debugging-port=9222
      - --hide-scrollbars
  meilisearch:
    container_name: meilisearch
    image: getmeili/meilisearch:v1.13.3
    restart: unless-stopped
    env_file:
      - .env
    environment:
      MEILI_NO_ANALYTICS: "true"
    volumes:
      - meilisearch:/meili_data

  redis:
    container_name: redis
    image: docker.io/library/redis:7
    restart: unless-stopped
    volumes:
      - redisdata:/data

  postgres:
    container_name: postgres
    image: docker.io/library/postgres:17
    restart: unless-stopped
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: paperless
      POSTGRES_USER: paperless
      POSTGRES_PASSWORD: paperless

  paperless-ngx:
    container_name: paperless-ngx
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    ports:
      - "8000:8000"
    volumes:
      - data:/usr/src/paperless/data
      - media:/usr/src/paperless/media
      - /home/system/paperless/export:/usr/src/paperless/export
      - /home/system/paperless/consume:/usr/src/paperless/consume
    env_file: paperless-docker-compose.env
    environment:
      PAPERLESS_REDIS: redis://redis:6379
      PAPERLESS_DBHOST: postgres

  paperless-ai:
    image: clusterzx/paperless-ai
    container_name: paperless-ai
    network_mode: bridge
    restart: unless-stopped
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges=true
    environment:
      - PUID=1000
      - PGID=1000
      - PAPERLESS_AI_PORT=${PAPERLESS_AI_PORT:-3000}
    ports:
      - "5000:${PAPERLESS_AI_PORT:-3000}"
    volumes:
      - paperless-ai_data:/app/data


volumes:
  ollama: {}
  open-webui: {}
  meilisearch: {}
  data: {}
  media: {}
  pgdata: {}
  redisdata: {}
  paperless-ai_data: